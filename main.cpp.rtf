#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<fstream>
#include<unordered_map>
#include<string>
#include<sstream>
#include<memory>
#include<any>

using namespace std;
class Payload //For Further discussion
{
    typedef std::shared_ptr<Payload> Ptr;
    typedef std::shared_ptr<Ptr> children_t;
    public:
        virtual ~Payload()
        {
            std::cout<<"In Payload destructor";
        }
};
class Dictionary // For Further discussion
{
    friend class OrderManager;
    friend class FIXValidator;
    friend class FIXParser;
};

enum severity {INFO,WARN,ERROR};
inline void LogMessage(severity _serverity, const stringstream &message)
{
     string logSeverity;
     switch(_serverity)
     {
         case severity::INFO : logSeverity = "INFO:"; break;
         case severity::WARN : logSeverity = "WARN:"; break;
         case severity::ERROR : logSeverity = "ERROR:"; break;
     }
     
     cout<<logSeverity<<message.str()<<endl;
}

namespace spriderrock_ns
{
    struct PriceDetail
    {
        double HighBidPrice = 0;
        double HighAskPrice = 0;
        double LowBidPrice = 0;
        double LowAskPrice = 0;
        char decimals[4]; // Can be used for scaling and descaling purpose  
    }; 
    const unsigned char msgType_AddNewOrderSingle = 'D';
    const unsigned char msgType_Logon = 'A';
    const unsigned char msgType_ExecutionReport ='8';
    const unsigned char msgType_Heartbeat = '0';
    const unsigned char msgType_NewOrderMultiLeg[] = "AB";
    const unsigned char msgType_BusinessReject = 'j';
    enum msg_tag
    {
       /*FixHeader*/
       BeginString = 8,
       BodyLength = 9,
       MsgType = 35,
       SenderCompId = 49,       
       TargetCompId = 54,
       OnBehalfOfCompId = 115,
       DeliverToCompId = 128,
       SecureDataLen = 90,
       SecureData = 91,
       MsgSeqNum = 34,
       SendingTime = 52,
       /*-------End Fix Header-----*/
       /*FixTrailer*/
       Checksum = 10,
       /*-------End Fix Trailer----*/
       EncryptMethod = 98,
       HeartbeatInterval = 108,
       RawDataLength = 95,
       RawData = 96,
       ResetSequenceNumberFlag = 141,
       NextExpectedMsgSeqNum = 789,
       MaxMessageSize = 383,
       NoMsgTypes = 384,
       RefMesgType = 372,
       MsgDirection = 385,
       TestMsgIndicator = 464,
       UserName = 553,
       Password = 554,
       Account = 1,
       Price = 44,
       Side = 54,
       PriceType = 423
    };

    auto validateUniqueTag = [](auto const &pair)
    {
    if(!pair.second)
    {
        return false;
    }    
    return true;
    };
}

typedef unordered_map<string/*Account Id*/, spriderrock_ns::PriceDetail> AccountHighLowPriceMap;
typedef unordered_map<string /*Fix Tag*/, std::any /*Tag Value*/ > FixTagValueMap;

class FIXParser
{
    private:
    enum NowParsing {
        Tag,
        Value
    };
    friend class OrderManager;
    
    static const std::string to_string(NowParsing np)
    {
        switch(np)
        {
            case Tag: return "Tag";
            case Value: return "Value";
            default: break;
        }
        return "UNKNOWN";
    }
    public:

    FixTagValueMap parseFixMessageTags(std::string const& s)
    {
        stringstream log;
        FixTagValueMap tagValueMap;
        
        std::string::size_type key_pos = 0;
        std::string::size_type key_end;
        std::string::size_type val_pos;
        std::string::size_type val_end;

        while((key_end = s.find('=', key_pos)) != std::string::npos)
        {
            if((val_pos = s.find_first_not_of("= ", key_end)) == std::string::npos)
                break;

            val_end = s.find('|', val_pos);
            bool validation = spriderrock_ns::validateUniqueTag(tagValueMap.try_emplace(s.substr(key_pos, key_end - key_pos), s.substr(val_pos, val_end - val_pos)));            
            if(!validation)
            {
                log.str(std::string());
                log <<"Duplicate tag: " << s.substr(key_pos, key_end - key_pos) <<" SkippingMessage " << s;
                LogMessage(severity::ERROR,log);
                tagValueMap.clear();
                break;
            }
            key_pos = val_end;
            if(key_pos != std::string::npos)
                ++key_pos;
            
        }
        return tagValueMap;
}

};

class OrderManager
{
    private:
        AccountHighLowPriceMap accountToPriceMap;          
        void getHighLowPricePerAccount(FixTagValueMap const& newOrderSingle);   
        
    public: 
        void processOrders(FixTagValueMap const& newOrderSingle);
        void displayPriceTable();
      
        
};

void OrderManager::displayPriceTable()
{
    cout<<"\n\n\nAccount Price Table High Low Stats \n\n";
   
    for(const auto& element : accountToPriceMap)
    {
        cout<<"\nAccount : " << element.first<<"\n";
        cout<<"---------- HighBidPrice : " << element.second.HighBidPrice << "\n";
        cout<<"---------- LowBidPrice : " << element.second.LowBidPrice << "\n";
        cout<<"---------- HighAskPrice : " << element.second.HighAskPrice << "\n";
        cout<<"---------- LowAskPrice : " << element.second.LowAskPrice << "\n";
        
    }
    
}
void OrderManager::processOrders(FixTagValueMap const& newOrderSingle)
{
    getHighLowPricePerAccount(newOrderSingle);
}
void OrderManager::getHighLowPricePerAccount(FixTagValueMap const& newOrderSingle)
{
     double price;
     string side;
     string account;
     auto tagValueItr = newOrderSingle.find(to_string(spriderrock_ns::msg_tag::Account));
    
     if(tagValueItr != newOrderSingle.end())
     {
         account = std::any_cast<string>(tagValueItr->second);
     }
        tagValueItr = newOrderSingle.find(to_string(spriderrock_ns::msg_tag::Price)); 
         if(tagValueItr != newOrderSingle.end())
         {
             price = stold(std::any_cast<string>(tagValueItr->second));
         }
         tagValueItr = newOrderSingle.find(to_string(spriderrock_ns::msg_tag::Side)); 
         if(tagValueItr!=newOrderSingle.end())
         {
             side = std::any_cast<string>(tagValueItr->second);
         }
         auto accountPriceItr = accountToPriceMap.find(account);
         if(accountPriceItr != accountToPriceMap.end()) // Found the account
         {       
            if(tagValueItr!=newOrderSingle.end())
            {
                if(side == "1") // Bid Side
                {
                    if(accountPriceItr->second.HighBidPrice < price)
                        accountPriceItr->second.HighBidPrice = price;
                    if(accountPriceItr->second.LowBidPrice > price)
                        accountPriceItr->second.LowBidPrice = price;
                    if (accountPriceItr->second.HighBidPrice == 0) accountPriceItr->second.HighBidPrice = price;
                    if (accountPriceItr->second.LowBidPrice == 0) accountPriceItr->second.LowBidPrice = price;
                }
                if(side == "2") // Offer Side
                {
                    if(accountPriceItr->second.HighAskPrice < price)
                        accountPriceItr->second.HighAskPrice = price;
                    if(accountPriceItr->second.LowAskPrice > price)
                        accountPriceItr->second.LowAskPrice = price;
                    if (accountPriceItr->second.HighAskPrice == 0) accountPriceItr->second.HighAskPrice = price;
                    if (accountPriceItr->second.LowAskPrice == 0) accountPriceItr->second.LowAskPrice = price;
                }
            }
         }
         else
         {
            spriderrock_ns::PriceDetail priceDetail;
            if(side=="1")
            {
                priceDetail.HighBidPrice = price;
                priceDetail.LowBidPrice = price;
            }
            else
            {
                priceDetail.HighAskPrice = price;
                priceDetail.LowAskPrice = price;
            }
            accountToPriceMap.try_emplace(account,priceDetail);

        }
       
           
}

class SpiderrockFixSession
{
    private:
    shared_ptr<OrderManager> orderManager;
    shared_ptr<FIXParser> fixParser;

    public:
    SpiderrockFixSession() : orderManager(new OrderManager()) {}
    void SetupMsgHandlers(string const& fixMessage);
    void HandleOrderMessage(string const& fixMessage);  
    void DisplayHighLowPricePerAccount();
};

void SpiderrockFixSession::SetupMsgHandlers(string const& fixMessage)
{
    stringstream log;
    auto goodFix = fixParser->parseFixMessageTags(fixMessage);
    string msgType;
    if(!goodFix.empty())
    {
      auto fixItr  = goodFix.find(to_string(spriderrock_ns::msg_tag::MsgType));
        if(fixItr != goodFix.end())
        {
            msgType = std::any_cast<string>(fixItr->second);
        }
        switch (msgType[0])
        {
            case spriderrock_ns::msgType_AddNewOrderSingle :   orderManager->processOrders(goodFix); break;
            default: log.str(std::string());
                     log <<"Unhandled MsgTpe " << msgType[0] <<endl;
                     LogMessage(severity::WARN,log);
                     break;
        } 
    }
    
}
void SpiderrockFixSession::DisplayHighLowPricePerAccount()
{
    orderManager->displayPriceTable();
}
int main()
{
    SpiderrockFixSession *spiderrock = new SpiderrockFixSession();
    string line;
    while(getline(cin,line))
    {       
        spiderrock->SetupMsgHandlers(line.c_str());
    }
    spiderrock->DisplayHighLowPricePerAccount();
    return 0;
}
